@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using LMS.Shared.DTOs.AuthDtos
@using LMS.Blazor.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IHttpClientFactory HttpClientFactory
@inject ITokenStorage TokenStorage

<PageTitle>Log in</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center min-vh-100 align-items-center">
        <!-- Main Login Card -->
        <div class="col-lg-5 col-md-7 col-sm-10">
            <div class="card shadow-lg" style="border-radius: 1rem;">
                <!-- Card Header -->
                <div class="card-header text-center py-4" style="background-color: #1b6ec2; color: white; border-radius: 1rem 1rem 0 0;">
                    <h2 class="mb-0 fw-bold">Welcome Back</h2>
                    <p class="mb-0 mt-2">Sign in to your account</p>
                </div>
                
                <!-- Card Body -->
                <div class="card-body p-4">
                    <StatusMessage Message="@errorMessage" />
                    
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" role="alert" />
                        
                        <!-- Email Field -->
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email" class="form-label">Email Address</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        
                        <!-- Password Field -->
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="password" class="form-label">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        
                        <!-- Remember Me -->
                        <div class="form-check mb-4">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>
                        
                        <!-- Login Button -->
                        <div class="d-grid mb-4">
                            <button type="submit" class="btn btn-primary btn-lg" style="border-radius: 0.5rem;">
                                Sign In
                            </button>
                        </div>
                        
                        <!-- Links -->
                        <div class="text-center">
                            <div class="mb-2">
                                <a href="Account/ForgotPassword" class="text-decoration-none">Forgot your password?</a>
                            </div>
                            <div class="mb-2">
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" 
                                   class="text-decoration-none">Don't have an account? Register here</a>
                            </div>
                            <div>
                                <a href="Account/ResendEmailConfirmation" class="text-decoration-none small">Resend email confirmation</a>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        
       @*  <!-- External Login Section (if needed) -->
        <div class="col-lg-4 col-md-5 col-sm-10 mt-4 mt-lg-0">
            <div class="card shadow-sm h-100" style="border-radius: 1rem;">
                <div class="card-body p-4 text-center">
                    <h4 class="card-title mb-4" style="color: #1b6ec2;">Alternative Sign In</h4>
                    <hr class="mb-4" />
                    <ExternalLoginPicker />
                </div>
            </div>
        </div> *@
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true

        ApplicationUser? user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            errorMessage = "Email or password is incorrect";
            return;
        }

        //ToDo: make service of API call to remote server (LMS.API)!
        var tokens = await GetTokensFromApi(user.UserName!, Input.Password);

        if (tokens is null)
        {
            errorMessage = "Failed to login please try again.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            await TokenStorage.StoreTokensAsync(user.Id, tokens);

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    private async Task<TokenDto?> GetTokensFromApi(string username, string password)
    {
        var httpClient = HttpClientFactory.CreateClient("LmsAPIClient");
        var response = await httpClient.PostAsJsonAsync("api/auth/login", 
                                                    new UserAuthDto { UserName = username, Password = password });

        if (!response.IsSuccessStatusCode)
        {
            return null;
        }

        return await response.Content.ReadFromJsonAsync<TokenDto>();
    }
}